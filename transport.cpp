#include "transport.h"
#include <qdebug.h>
static const UCHAR aucCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40
};
//计算CRC16 低8位
static const UCHAR aucCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
    0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
    0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
    0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
    0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
    0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
    0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
    0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
    0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
    0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
    0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
    0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
    0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};
class frmNetTool;
GFmachine::GFmachine(uint16_t setID)
{
    id = setID;
}
bool GFmachine::isUpate()
{
    if(UpdateFlag == true)
    {
        UpdateFlag = false;
        return true;
    }
    else
    {
        return false;
    }
}
uint8_t GFmachine::RecvStaus()
{
    uint8_t res = isRecv;
    isRecv  = 0;
    return res;
}

Transctrl::Transctrl()
{
    state=0;
   // connect(this, SIGNAL(Log(QString)), this, SLOT(appeedLog(QString)));
}
void Transctrl::recvpack(QByteArray data)
{
    for(int i;i<data.length();i++)
    {
      unpack(data.at(i));
    }
}
QByteArray Transctrl::CalUpdateCommad(uint16_t machineID,int binSize)
{


    QByteArray data;
    int cnt=0;
    data[cnt++] = 0xAA;
    data[cnt++] = 0xAF;
    data[cnt++] = machineID>>8;
    data[cnt++] = machineID;
    data[cnt++] = 0xF8;
    data[cnt++] = binSize;

    uint8_t sum = 0;
    uint8_t i   = 0;
    for( i=0;i<data.length();i++)
        sum += data[i];
    data[cnt++]=sum;
    return data;
}
QByteArray Transctrl::CalUpdateOver(uint16_t machineID)
{

    QByteArray data;
    int cnt=0;
    data[cnt++] = 0xAA;
    data[cnt++] = 0xAF;
    data[cnt++] = machineID>>8;
    data[cnt++] = machineID;
    data[cnt++] = 0xF8;
    data[cnt++] = 1;
    data[cnt++] = 0xff;
    uint8_t sum = 0;
    uint8_t i   = 0;
    for( i=0;i<data.length();i++)
        sum += data[i];
    data[cnt++]=sum;
    return data;
}
QByteArray Transctrl::CalUpdateBin(uint16_t machineID, int idx, QByteArray bufdata)
{
    uchar data[1034] = {0};//QbyteArray buneng有效清零
    ushort CRC_data;
    QByteArray Qdata;

    int cnt;

    data[cnt++] = 0xAA;
    data[cnt++] = 0xAF;
    data[cnt++] = machineID>>8;
    data[cnt++] = machineID;
    data[cnt++] = 0xF8;
    data[cnt++] = 1; //1024byte
    data[cnt++] = idx; //第几次包
    data[cnt++] = ~idx;

    for(int i=0;i<bufdata.length();i++)
    {
      data[i+8] = bufdata[i];
    }
    qDebug("file_length = %d",bufdata.length());

    CRC_data = usMBCRC16(data+8, 1024);

    data[7+1024+1]= CRC_data>>8;
    data[7+1024+2]= CRC_data;

    for(int i=0;i<1034;i++)
        Qdata[i]= data[i];

    return Qdata;
}
ushort Transctrl::usMBCRC16(uchar* pucFrame, int usLen)
{
    ushort ucCRCHi = 0xFF;
    ushort ucCRCLo = 0xFF;
    int iIndex;
    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *(pucFrame++) ;
        ucCRCLo = (ushort)(ucCRCHi ^ aucCRCHi[iIndex]);
        ucCRCHi = aucCRCLo[iIndex];
    }
    return (ushort)( ucCRCHi << 8 | ucCRCLo );
}
bool Transctrl::sendpack(QByteArray data)
{

}

void Transctrl::unpack(uint8_t data)
{

   if(state==0&&data==0xAA)
    {
        state=1;
        RxBuffer[0]=data;

    }
    else if(state==1&&data==0xAF)
    {
        state=2;
        RxBuffer[1]=data;

    }
    else if(state==2) //ID high byte
    {
        state=3;
        RxBuffer[2]=data;

    }
    else if(state==3) //ID low byte
    {
        state=4;
        RxBuffer[3]=data;

    }
    else if(state==4) //fuciton
    {
       state=5;
       RxBuffer[4]=data;

    }
    else if(state==5)//len
    {

        state = 6;
        RxBuffer[5] = data;
        _data_len   = data;
        _data_cnt   = 0;
//        if(RxBuffer[4]==0xF8 && (RxBuffer[5]==0xBB || RxBuffer[5]==0xAA))//升级回馈
//        {
//            RxBuffer[5] = data;
//            _data_len = 2;
//           qDebug("okk");
//           UpdateUnpack(RxBuffer,data);
//        }
        if(_data_len == 0)
        {
            state = 7;
        }
    }
    else if(state==6 && _data_len>0)//data
    {
//       if(RxBuffer[4]==0xF8 && (RxBuffer[5]==0xBB && data == 0x0E))//区分愚蠢的长度
//       {
//           RxBuffer[6]=data;
//           dataAnalysis(RxBuffer,_data_cnt+7);
//       }
        _data_len--;
        RxBuffer[6+_data_cnt++]=data;
        if(_data_len==0)
            state = 7;

    }
    else if(state==7)//sum
    {
        state = 0;
        RxBuffer[6+_data_cnt]=data;

        dataAnalysis(RxBuffer,_data_cnt+7);

    }
    else
        state = 0;
   //  qDebug("bb1 %d",state);
   //  qDebug("bb2 %d",_data_len);
}
void Transctrl::UpdateUnpack(uint8_t *data,int num)
{

}
void Transctrl::dataAnalysis( uint8_t *data,int num)
{
    uint8_t sum = 0;
    uint8_t i=0;
    uint16_t id;
    uint8_t sum_check = data[num-1];
    GFmachine *node;


    for( i=0;i<(num-1);i++)
        sum += data[i];
     if(!(sum == sum_check))
    {
         qDebug("判断sum %d === %d",sum,sum_check);
        return;		//判断sum
    }

    if(!(data[0]==0xAA && data[1]==0xAF)   )
    {
         qDebug("判断帧头");
        return;		//判断帧头
    }



    id = data[2]<< 8 | data[3];
    if(!GFNode.contains(id))
    {
      GFNode.insert(id,new GFmachine(id));
      emit Log(QString("%1号机器上线.").arg(id));
      emit addNode(id);

    }

    node = GFNode.value(id);
    node->id       = id;
    node->command  = data[4];
    node->data_len = data[5];

    node->isLive = true;
    if(node->command == 0xF8)
    {

        if(data[6] == 0x00)
        {
              node->UpdateFlag = true;
              emit Log(QString("%1号准备就绪，准备升级。。。").arg(node->id));
        }
        else if(data[6] == 0xBB)
        {

           node->isRecv = 1;
           node->RecvErrorIdx = data[7];
           emit Log(QString("%1号接受错误包，编号:%2").arg(node->id).arg(node->RecvErrorIdx));

        }
        else if(data[6] == 0xAA)
        {
              node->isRecv = 2;
              node->RecvErrorIdx = data[7];
              emit Log(QString("%1号接受正确包，编号%2").arg(node->id).arg(node->RecvErrorIdx));
        }
        else if(data[6] == 0xFF)
        {
              node->isRecv = 3;
              node->RecvErrorIdx = data[7];
              emit Log(QString("%---------成功升级标志接受成功-----%2").arg(node->id).arg(node->RecvErrorIdx));
        }
        else
        {
              emit Log(QString("--------接受升级格式错误---------"));
        }

    }
//    qDebug("有%d",node->command);
}

